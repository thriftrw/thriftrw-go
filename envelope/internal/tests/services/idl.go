// Code generated by thriftrw v1.13.0. DO NOT EDIT.
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package services

import (
	"go.uber.org/thriftrw/envelope/internal/tests/exceptions"
	"go.uber.org/thriftrw/envelope/internal/tests/unions"
	"go.uber.org/thriftrw/thriftreflect"
)

// ThriftModule represents the IDL file used to generate this package.
var ThriftModule = &thriftreflect.ThriftModule{
	Name:     "services",
	Package:  "go.uber.org/thriftrw/envelope/internal/tests/services",
	FilePath: "services.thrift",
	SHA1:     "22d2183c133fb327925d7288a6191b17e8f28175",
	Includes: []*thriftreflect.ThriftModule{
		exceptions.ThriftModule,
		unions.ThriftModule,
	},
	Raw: rawIDL,
}

const rawIDL = "include \"./unions.thrift\"\ninclude \"./exceptions.thrift\"\n\ntypedef string Key\n\nexception InternalError {\n    1: optional string message\n}\n\nservice KeyValue {\n    // void and no exceptions\n    void setValue(1: Key key, 2: unions.ArbitraryValue value)\n\n    void setValueV2(\n        /** Key to change. */\n        1: required Key key,\n        /**\n         * New value for the key.\n         *\n         * If the key already has an existing value, it will be overwritten.\n         */\n        2: required unions.ArbitraryValue value,\n    )\n\n    // Return with exceptions\n    unions.ArbitraryValue getValue(1: Key key)\n        throws (1: exceptions.DoesNotExistException doesNotExist)\n\n    // void with exceptions\n    void deleteValue(1: Key key)\n        throws (\n            /**\n             * Raised if a value with the given key doesn't exist.\n             */\n            1: exceptions.DoesNotExistException doesNotExist,\n            2: InternalError internalError\n        )\n\n    list<unions.ArbitraryValue> getManyValues(\n        1: list<Key> range  // < reserved keyword as an argument\n    ) throws (\n        1: exceptions.DoesNotExistException doesNotExist,\n    )\n\n    i64 size()  // < primitve return value\n}\n\nservice Cache {\n    oneway void clear()\n    oneway void clearAfter(1: i64 durationMS)\n}\n\nstruct ConflictingNames_SetValue_Args {\n    1: required string key\n    2: required binary value\n}\n\nservice ConflictingNames {\n    void setValue(1: ConflictingNames_SetValue_Args request)\n}\n\nservice non_standard_service_name {\n    void non_standard_function_name()\n}\n"
