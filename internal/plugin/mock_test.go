// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/thriftrw/internal/plugin (interfaces: Handle)

package plugin

import (
	gomock "github.com/golang/mock/gomock"
	api "go.uber.org/thriftrw/plugin/api"
)

// Mock of Handle interface
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *_MockHandleRecorder
}

// Recorder for MockHandle (not exported)
type _MockHandleRecorder struct {
	mock *MockHandle
}

func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &_MockHandleRecorder{mock}
	return mock
}

func (_m *MockHandle) EXPECT() *_MockHandleRecorder {
	return _m.recorder
}

func (_m *MockHandle) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHandleRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockHandle) ServiceGenerator() api.ServiceGenerator {
	ret := _m.ctrl.Call(_m, "ServiceGenerator")
	ret0, _ := ret[0].(api.ServiceGenerator)
	return ret0
}

func (_mr *_MockHandleRecorder) ServiceGenerator() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceGenerator")
}
