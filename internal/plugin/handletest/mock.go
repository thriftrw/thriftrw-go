// Automatically generated by MockGen. DO NOT EDIT!

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Source: github.com/thriftrw/thriftrw-go/internal/plugin (interfaces: Handle)

package handletest

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/thriftrw/thriftrw-go/plugin/api"
)

// Mock of Handle interface
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *_MockHandleRecorder
}

// Recorder for MockHandle (not exported)
type _MockHandleRecorder struct {
	mock *MockHandle
}

func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &_MockHandleRecorder{mock}
	return mock
}

func (_m *MockHandle) EXPECT() *_MockHandleRecorder {
	return _m.recorder
}

func (_m *MockHandle) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHandleRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockHandle) ServiceGenerator() api.ServiceGenerator {
	ret := _m.ctrl.Call(_m, "ServiceGenerator")
	ret0, _ := ret[0].(api.ServiceGenerator)
	return ret0
}

func (_mr *_MockHandleRecorder) ServiceGenerator() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceGenerator")
}
