// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	enums "go.uber.org/thriftrw/gen/testdata/enums"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var NameSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
			NameSet = true
		case "contact":
			if in.IsNull() {
				in.Skip()
				out.Contact = nil
			} else {
				if out.Contact == nil {
					out.Contact = new(ContactInfo)
				}
				(*out.Contact).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !NameSet {
		in.AddError(fmt.Errorf("key 'name' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if in.Contact != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contact\":")
		if in.Contact == nil {
			out.RawString("null")
		} else {
			(*in.Contact).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs1(in *jlexer.Lexer, out *Size) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var WidthSet bool
	var HeightSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = float64(in.Float64())
			WidthSet = true
		case "height":
			out.Height = float64(in.Float64())
			HeightSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !WidthSet {
		in.AddError(fmt.Errorf("key 'width' is required"))
	}
	if !HeightSet {
		in.AddError(fmt.Errorf("key 'height' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs1(out *jwriter.Writer, in Size) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"width\":")
	out.Float64(float64(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"height\":")
	out.Float64(float64(in.Height))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Size) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Size) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Size) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Size) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs1(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs2(in *jlexer.Lexer, out *PrimitiveRequiredStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var BoolFieldSet bool
	var ByteFieldSet bool
	var Int16FieldSet bool
	var Int32FieldSet bool
	var Int64FieldSet bool
	var DoubleFieldSet bool
	var StringFieldSet bool
	var BinaryFieldSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boolField":
			out.BoolField = bool(in.Bool())
			BoolFieldSet = true
		case "byteField":
			out.ByteField = int8(in.Int8())
			ByteFieldSet = true
		case "int16Field":
			out.Int16Field = int16(in.Int16())
			Int16FieldSet = true
		case "int32Field":
			out.Int32Field = int32(in.Int32())
			Int32FieldSet = true
		case "int64Field":
			out.Int64Field = int64(in.Int64())
			Int64FieldSet = true
		case "doubleField":
			out.DoubleField = float64(in.Float64())
			DoubleFieldSet = true
		case "stringField":
			out.StringField = string(in.String())
			StringFieldSet = true
		case "binaryField":
			if in.IsNull() {
				in.Skip()
				out.BinaryField = nil
			} else {
				out.BinaryField = in.Bytes()
			}
			BinaryFieldSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !BoolFieldSet {
		in.AddError(fmt.Errorf("key 'boolField' is required"))
	}
	if !ByteFieldSet {
		in.AddError(fmt.Errorf("key 'byteField' is required"))
	}
	if !Int16FieldSet {
		in.AddError(fmt.Errorf("key 'int16Field' is required"))
	}
	if !Int32FieldSet {
		in.AddError(fmt.Errorf("key 'int32Field' is required"))
	}
	if !Int64FieldSet {
		in.AddError(fmt.Errorf("key 'int64Field' is required"))
	}
	if !DoubleFieldSet {
		in.AddError(fmt.Errorf("key 'doubleField' is required"))
	}
	if !StringFieldSet {
		in.AddError(fmt.Errorf("key 'stringField' is required"))
	}
	if !BinaryFieldSet {
		in.AddError(fmt.Errorf("key 'binaryField' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs2(out *jwriter.Writer, in PrimitiveRequiredStruct) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"boolField\":")
	out.Bool(bool(in.BoolField))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"byteField\":")
	out.Int8(int8(in.ByteField))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"int16Field\":")
	out.Int16(int16(in.Int16Field))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"int32Field\":")
	out.Int32(int32(in.Int32Field))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"int64Field\":")
	out.Int64(int64(in.Int64Field))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"doubleField\":")
	out.Float64(float64(in.DoubleField))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stringField\":")
	out.String(string(in.StringField))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"binaryField\":")
	out.Base64Bytes(in.BinaryField)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrimitiveRequiredStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrimitiveRequiredStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrimitiveRequiredStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrimitiveRequiredStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs2(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs3(in *jlexer.Lexer, out *PrimitiveOptionalStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boolField":
			if in.IsNull() {
				in.Skip()
				out.BoolField = nil
			} else {
				if out.BoolField == nil {
					out.BoolField = new(bool)
				}
				*out.BoolField = bool(in.Bool())
			}
		case "byteField":
			if in.IsNull() {
				in.Skip()
				out.ByteField = nil
			} else {
				if out.ByteField == nil {
					out.ByteField = new(int8)
				}
				*out.ByteField = int8(in.Int8())
			}
		case "int16Field":
			if in.IsNull() {
				in.Skip()
				out.Int16Field = nil
			} else {
				if out.Int16Field == nil {
					out.Int16Field = new(int16)
				}
				*out.Int16Field = int16(in.Int16())
			}
		case "int32Field":
			if in.IsNull() {
				in.Skip()
				out.Int32Field = nil
			} else {
				if out.Int32Field == nil {
					out.Int32Field = new(int32)
				}
				*out.Int32Field = int32(in.Int32())
			}
		case "int64Field":
			if in.IsNull() {
				in.Skip()
				out.Int64Field = nil
			} else {
				if out.Int64Field == nil {
					out.Int64Field = new(int64)
				}
				*out.Int64Field = int64(in.Int64())
			}
		case "doubleField":
			if in.IsNull() {
				in.Skip()
				out.DoubleField = nil
			} else {
				if out.DoubleField == nil {
					out.DoubleField = new(float64)
				}
				*out.DoubleField = float64(in.Float64())
			}
		case "stringField":
			if in.IsNull() {
				in.Skip()
				out.StringField = nil
			} else {
				if out.StringField == nil {
					out.StringField = new(string)
				}
				*out.StringField = string(in.String())
			}
		case "binaryField":
			if in.IsNull() {
				in.Skip()
				out.BinaryField = nil
			} else {
				out.BinaryField = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs3(out *jwriter.Writer, in PrimitiveOptionalStruct) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BoolField != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"boolField\":")
		if in.BoolField == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.BoolField))
		}
	}
	if in.ByteField != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"byteField\":")
		if in.ByteField == nil {
			out.RawString("null")
		} else {
			out.Int8(int8(*in.ByteField))
		}
	}
	if in.Int16Field != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"int16Field\":")
		if in.Int16Field == nil {
			out.RawString("null")
		} else {
			out.Int16(int16(*in.Int16Field))
		}
	}
	if in.Int32Field != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"int32Field\":")
		if in.Int32Field == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Int32Field))
		}
	}
	if in.Int64Field != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"int64Field\":")
		if in.Int64Field == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Int64Field))
		}
	}
	if in.DoubleField != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"doubleField\":")
		if in.DoubleField == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.DoubleField))
		}
	}
	if in.StringField != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stringField\":")
		if in.StringField == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.StringField))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"binaryField\":")
	out.Base64Bytes(in.BinaryField)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrimitiveOptionalStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrimitiveOptionalStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrimitiveOptionalStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrimitiveOptionalStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs3(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs4(in *jlexer.Lexer, out *Point) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var XSet bool
	var YSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float64(in.Float64())
			XSet = true
		case "y":
			out.Y = float64(in.Float64())
			YSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !XSet {
		in.AddError(fmt.Errorf("key 'x' is required"))
	}
	if !YSet {
		in.AddError(fmt.Errorf("key 'y' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs4(out *jwriter.Writer, in Point) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"x\":")
	out.Float64(float64(in.X))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"y\":")
	out.Float64(float64(in.Y))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Point) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Point) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Point) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Point) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs4(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs5(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ValueSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int32(in.Int32())
			ValueSet = true
		case "tail":
			if in.IsNull() {
				in.Skip()
				out.Tail = nil
			} else {
				if out.Tail == nil {
					out.Tail = new(List)
				}
				easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs6(in, &*out.Tail)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ValueSet {
		in.AddError(fmt.Errorf("key 'value' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs5(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Int32(int32(in.Value))
	if in.Tail != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tail\":")
		if in.Tail == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs6(out, *in.Tail)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs5(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs6(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ValueSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int32(in.Int32())
			ValueSet = true
		case "tail":
			if in.IsNull() {
				in.Skip()
				out.Tail = nil
			} else {
				if out.Tail == nil {
					out.Tail = new(List)
				}
				easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs6(in, &*out.Tail)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ValueSet {
		in.AddError(fmt.Errorf("key 'value' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs6(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Int32(int32(in.Value))
	if in.Tail != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tail\":")
		if in.Tail == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs6(out, *in.Tail)
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs7(in *jlexer.Lexer, out *Graph) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var EdgesSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "edges":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]*Edge, 0, 8)
					} else {
						out.Edges = []*Edge{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Edge
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Edge)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Edges = append(out.Edges, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
			EdgesSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !EdgesSet {
		in.AddError(fmt.Errorf("key 'edges' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs7(out *jwriter.Writer, in Graph) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"edges\":")
	if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.Edges {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				(*v9).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Graph) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Graph) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Graph) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Graph) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs7(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs8(in *jlexer.Lexer, out *Frame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var TopLeftSet bool
	var SizeSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topLeft":
			if in.IsNull() {
				in.Skip()
				out.TopLeft = nil
			} else {
				if out.TopLeft == nil {
					out.TopLeft = new(Point)
				}
				(*out.TopLeft).UnmarshalEasyJSON(in)
			}
			TopLeftSet = true
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				if out.Size == nil {
					out.Size = new(Size)
				}
				(*out.Size).UnmarshalEasyJSON(in)
			}
			SizeSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !TopLeftSet {
		in.AddError(fmt.Errorf("key 'topLeft' is required"))
	}
	if !SizeSet {
		in.AddError(fmt.Errorf("key 'size' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs8(out *jwriter.Writer, in Frame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topLeft\":")
	if in.TopLeft == nil {
		out.RawString("null")
	} else {
		(*in.TopLeft).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"size\":")
	if in.Size == nil {
		out.RawString("null")
	} else {
		(*in.Size).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Frame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Frame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Frame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Frame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs8(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs9(in *jlexer.Lexer, out *EmptyStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs9(out *jwriter.Writer, in EmptyStruct) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmptyStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmptyStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmptyStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmptyStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs9(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs10(in *jlexer.Lexer, out *Edge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var StartPointSet bool
	var EndPointSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startPoint":
			if in.IsNull() {
				in.Skip()
				out.StartPoint = nil
			} else {
				if out.StartPoint == nil {
					out.StartPoint = new(Point)
				}
				(*out.StartPoint).UnmarshalEasyJSON(in)
			}
			StartPointSet = true
		case "endPoint":
			if in.IsNull() {
				in.Skip()
				out.EndPoint = nil
			} else {
				if out.EndPoint == nil {
					out.EndPoint = new(Point)
				}
				(*out.EndPoint).UnmarshalEasyJSON(in)
			}
			EndPointSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !StartPointSet {
		in.AddError(fmt.Errorf("key 'startPoint' is required"))
	}
	if !EndPointSet {
		in.AddError(fmt.Errorf("key 'endPoint' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs10(out *jwriter.Writer, in Edge) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"startPoint\":")
	if in.StartPoint == nil {
		out.RawString("null")
	} else {
		(*in.StartPoint).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"endPoint\":")
	if in.EndPoint == nil {
		out.RawString("null")
	} else {
		(*in.EndPoint).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Edge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Edge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Edge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Edge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs10(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs11(in *jlexer.Lexer, out *DefaultsStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredPrimitive":
			if in.IsNull() {
				in.Skip()
				out.RequiredPrimitive = nil
			} else {
				if out.RequiredPrimitive == nil {
					out.RequiredPrimitive = new(int32)
				}
				*out.RequiredPrimitive = int32(in.Int32())
			}
		case "optionalPrimitive":
			if in.IsNull() {
				in.Skip()
				out.OptionalPrimitive = nil
			} else {
				if out.OptionalPrimitive == nil {
					out.OptionalPrimitive = new(int32)
				}
				*out.OptionalPrimitive = int32(in.Int32())
			}
		case "requiredEnum":
			if in.IsNull() {
				in.Skip()
				out.RequiredEnum = nil
			} else {
				if out.RequiredEnum == nil {
					out.RequiredEnum = new(enums.EnumDefault)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RequiredEnum).UnmarshalJSON(data))
				}
			}
		case "optionalEnum":
			if in.IsNull() {
				in.Skip()
				out.OptionalEnum = nil
			} else {
				if out.OptionalEnum == nil {
					out.OptionalEnum = new(enums.EnumDefault)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OptionalEnum).UnmarshalJSON(data))
				}
			}
		case "requiredList":
			if in.IsNull() {
				in.Skip()
				out.RequiredList = nil
			} else {
				in.Delim('[')
				if out.RequiredList == nil {
					if !in.IsDelim(']') {
						out.RequiredList = make([]string, 0, 4)
					} else {
						out.RequiredList = []string{}
					}
				} else {
					out.RequiredList = (out.RequiredList)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.RequiredList = append(out.RequiredList, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optionalList":
			if in.IsNull() {
				in.Skip()
				out.OptionalList = nil
			} else {
				in.Delim('[')
				if out.OptionalList == nil {
					if !in.IsDelim(']') {
						out.OptionalList = make([]float64, 0, 8)
					} else {
						out.OptionalList = []float64{}
					}
				} else {
					out.OptionalList = (out.OptionalList)[:0]
				}
				for !in.IsDelim(']') {
					var v11 float64
					v11 = float64(in.Float64())
					out.OptionalList = append(out.OptionalList, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredStruct":
			if in.IsNull() {
				in.Skip()
				out.RequiredStruct = nil
			} else {
				if out.RequiredStruct == nil {
					out.RequiredStruct = new(Frame)
				}
				(*out.RequiredStruct).UnmarshalEasyJSON(in)
			}
		case "optionalStruct":
			if in.IsNull() {
				in.Skip()
				out.OptionalStruct = nil
			} else {
				if out.OptionalStruct == nil {
					out.OptionalStruct = new(Edge)
				}
				(*out.OptionalStruct).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs11(out *jwriter.Writer, in DefaultsStruct) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequiredPrimitive != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requiredPrimitive\":")
		if in.RequiredPrimitive == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.RequiredPrimitive))
		}
	}
	if in.OptionalPrimitive != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"optionalPrimitive\":")
		if in.OptionalPrimitive == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.OptionalPrimitive))
		}
	}
	if in.RequiredEnum != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requiredEnum\":")
		if in.RequiredEnum == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.RequiredEnum).MarshalJSON())
		}
	}
	if in.OptionalEnum != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"optionalEnum\":")
		if in.OptionalEnum == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OptionalEnum).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"requiredList\":")
	if in.RequiredList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v12, v13 := range in.RequiredList {
			if v12 > 0 {
				out.RawByte(',')
			}
			out.String(string(v13))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"optionalList\":")
	if in.OptionalList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.OptionalList {
			if v14 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v15))
		}
		out.RawByte(']')
	}
	if in.RequiredStruct != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"requiredStruct\":")
		if in.RequiredStruct == nil {
			out.RawString("null")
		} else {
			(*in.RequiredStruct).MarshalEasyJSON(out)
		}
	}
	if in.OptionalStruct != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"optionalStruct\":")
		if in.OptionalStruct == nil {
			out.RawString("null")
		} else {
			(*in.OptionalStruct).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DefaultsStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DefaultsStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DefaultsStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DefaultsStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs11(l, v)
}
func easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs12(in *jlexer.Lexer, out *ContactInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var EmailAddressSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emailAddress":
			out.EmailAddress = string(in.String())
			EmailAddressSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !EmailAddressSet {
		in.AddError(fmt.Errorf("key 'emailAddress' is required"))
	}
}
func easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs12(out *jwriter.Writer, in ContactInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"emailAddress\":")
	out.String(string(in.EmailAddress))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoUberOrgThriftrwGenTestdataStructs12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoUberOrgThriftrwGenTestdataStructs12(l, v)
}
