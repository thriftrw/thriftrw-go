// Code generated by thriftrw

package structs

import (
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type ContactInfo struct {
	EmailAddress string `json:"emailAddress"`
}

func (v *ContactInfo) ToWire() wire.Value {
	var fields [1]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.EmailAddress)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *ContactInfo) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.EmailAddress, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ContactInfo) String() string {
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("EmailAddress: %v", v.EmailAddress)
	i++
	return fmt.Sprintf("ContactInfo{%v}", strings.Join(fields[:i], ", "))
}

type Edge struct {
	Start *Point `json:"start,omitempty"`
	End   *Point `json:"end,omitempty"`
}

func (v *Edge) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: v.Start.ToWire()}
	i++
	fields[i] = wire.Field{ID: 2, Value: v.End.ToWire()}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func _Point_Read(w wire.Value) (*Point, error) {
	var v Point
	err := v.FromWire(w)
	return &v, err
}

func (v *Edge) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Start, err = _Point_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.End, err = _Point_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Edge) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Start: %v", v.Start)
	i++
	fields[i] = fmt.Sprintf("End: %v", v.End)
	i++
	return fmt.Sprintf("Edge{%v}", strings.Join(fields[:i], ", "))
}

type EmptyStruct struct{}

func (v *EmptyStruct) ToWire() wire.Value {
	var fields [0]wire.Field
	i := 0
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *EmptyStruct) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *EmptyStruct) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("EmptyStruct{%v}", strings.Join(fields[:i], ", "))
}

type Frame struct {
	TopLeft *Point `json:"topLeft,omitempty"`
	Size    *Size  `json:"size,omitempty"`
}

func (v *Frame) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: v.TopLeft.ToWire()}
	i++
	fields[i] = wire.Field{ID: 2, Value: v.Size.ToWire()}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func _Size_Read(w wire.Value) (*Size, error) {
	var v Size
	err := v.FromWire(w)
	return &v, err
}

func (v *Frame) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.TopLeft, err = _Point_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Size, err = _Size_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Frame) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("TopLeft: %v", v.TopLeft)
	i++
	fields[i] = fmt.Sprintf("Size: %v", v.Size)
	i++
	return fmt.Sprintf("Frame{%v}", strings.Join(fields[:i], ", "))
}

type Graph struct {
	Edges []*Edge `json:"edges"`
}

type _List_Edge_ValueList []*Edge

func (v _List_Edge_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		err := f(x.ToWire())
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Edge_ValueList) Close() {
}

func (v *Graph) ToWire() wire.Value {
	var fields [1]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueList(wire.List{ValueType: wire.TStruct, Size: len(v.Edges), Items: _List_Edge_ValueList(v.Edges)})}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func _Edge_Read(w wire.Value) (*Edge, error) {
	var v Edge
	err := v.FromWire(w)
	return &v, err
}

func _List_Edge_Read(l wire.List) ([]*Edge, error) {
	if l.ValueType != wire.TStruct {
		return nil, nil
	}
	o := make([]*Edge, 0, l.Size)
	err := l.Items.ForEach(func(x wire.Value) error {
		i, err := _Edge_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Items.Close()
	return o, err
}

func (v *Graph) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Edges, err = _List_Edge_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Graph) String() string {
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Edges: %v", v.Edges)
	i++
	return fmt.Sprintf("Graph{%v}", strings.Join(fields[:i], ", "))
}

type Point struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

func (v *Point) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueDouble(v.X)}
	i++
	fields[i] = wire.Field{ID: 2, Value: wire.NewValueDouble(v.Y)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *Point) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TDouble {
				v.X, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TDouble {
				v.Y, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Point) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("X: %v", v.X)
	i++
	fields[i] = fmt.Sprintf("Y: %v", v.Y)
	i++
	return fmt.Sprintf("Point{%v}", strings.Join(fields[:i], ", "))
}

type PrimitiveOptionalStruct struct {
	BoolField   *bool    `json:"boolField,omitempty"`
	ByteField   *int8    `json:"byteField,omitempty"`
	Int16Field  *int16   `json:"int16Field,omitempty"`
	Int32Field  *int32   `json:"int32Field,omitempty"`
	Int64Field  *int64   `json:"int64Field,omitempty"`
	DoubleField *float64 `json:"doubleField,omitempty"`
	StringField *string  `json:"stringField,omitempty"`
	BinaryField []byte   `json:"binaryField"`
}

func (v *PrimitiveOptionalStruct) ToWire() wire.Value {
	var fields [8]wire.Field
	i := 0
	if v.BoolField != nil {
		fields[i] = wire.Field{ID: 1, Value: wire.NewValueBool(*(v.BoolField))}
		i++
	}
	if v.ByteField != nil {
		fields[i] = wire.Field{ID: 2, Value: wire.NewValueI8(*(v.ByteField))}
		i++
	}
	if v.Int16Field != nil {
		fields[i] = wire.Field{ID: 3, Value: wire.NewValueI16(*(v.Int16Field))}
		i++
	}
	if v.Int32Field != nil {
		fields[i] = wire.Field{ID: 4, Value: wire.NewValueI32(*(v.Int32Field))}
		i++
	}
	if v.Int64Field != nil {
		fields[i] = wire.Field{ID: 5, Value: wire.NewValueI64(*(v.Int64Field))}
		i++
	}
	if v.DoubleField != nil {
		fields[i] = wire.Field{ID: 6, Value: wire.NewValueDouble(*(v.DoubleField))}
		i++
	}
	if v.StringField != nil {
		fields[i] = wire.Field{ID: 7, Value: wire.NewValueString(*(v.StringField))}
		i++
	}
	if v.BinaryField != nil {
		fields[i] = wire.Field{ID: 8, Value: wire.NewValueBinary(v.BinaryField)}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *PrimitiveOptionalStruct) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.BoolField = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.ByteField = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				var x int16
				x, err = field.Value.GetI16(), error(nil)
				v.Int16Field = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Int32Field = &x
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Int64Field = &x
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.DoubleField = &x
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.StringField = &x
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				v.BinaryField, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PrimitiveOptionalStruct) String() string {
	var fields [8]string
	i := 0
	if v.BoolField != nil {
		fields[i] = fmt.Sprintf("BoolField: %v", *(v.BoolField))
		i++
	}
	if v.ByteField != nil {
		fields[i] = fmt.Sprintf("ByteField: %v", *(v.ByteField))
		i++
	}
	if v.Int16Field != nil {
		fields[i] = fmt.Sprintf("Int16Field: %v", *(v.Int16Field))
		i++
	}
	if v.Int32Field != nil {
		fields[i] = fmt.Sprintf("Int32Field: %v", *(v.Int32Field))
		i++
	}
	if v.Int64Field != nil {
		fields[i] = fmt.Sprintf("Int64Field: %v", *(v.Int64Field))
		i++
	}
	if v.DoubleField != nil {
		fields[i] = fmt.Sprintf("DoubleField: %v", *(v.DoubleField))
		i++
	}
	if v.StringField != nil {
		fields[i] = fmt.Sprintf("StringField: %v", *(v.StringField))
		i++
	}
	if v.BinaryField != nil {
		fields[i] = fmt.Sprintf("BinaryField: %v", v.BinaryField)
		i++
	}
	return fmt.Sprintf("PrimitiveOptionalStruct{%v}", strings.Join(fields[:i], ", "))
}

type PrimitiveRequiredStruct struct {
	BoolField   bool    `json:"boolField"`
	ByteField   int8    `json:"byteField"`
	Int16Field  int16   `json:"int16Field"`
	Int32Field  int32   `json:"int32Field"`
	Int64Field  int64   `json:"int64Field"`
	DoubleField float64 `json:"doubleField"`
	StringField string  `json:"stringField"`
	BinaryField []byte  `json:"binaryField"`
}

func (v *PrimitiveRequiredStruct) ToWire() wire.Value {
	var fields [8]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueBool(v.BoolField)}
	i++
	fields[i] = wire.Field{ID: 2, Value: wire.NewValueI8(v.ByteField)}
	i++
	fields[i] = wire.Field{ID: 3, Value: wire.NewValueI16(v.Int16Field)}
	i++
	fields[i] = wire.Field{ID: 4, Value: wire.NewValueI32(v.Int32Field)}
	i++
	fields[i] = wire.Field{ID: 5, Value: wire.NewValueI64(v.Int64Field)}
	i++
	fields[i] = wire.Field{ID: 6, Value: wire.NewValueDouble(v.DoubleField)}
	i++
	fields[i] = wire.Field{ID: 7, Value: wire.NewValueString(v.StringField)}
	i++
	fields[i] = wire.Field{ID: 8, Value: wire.NewValueBinary(v.BinaryField)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *PrimitiveRequiredStruct) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.BoolField, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				v.ByteField, err = field.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				v.Int16Field, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				v.Int32Field, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				v.Int64Field, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				v.DoubleField, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.StringField, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				v.BinaryField, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PrimitiveRequiredStruct) String() string {
	var fields [8]string
	i := 0
	fields[i] = fmt.Sprintf("BoolField: %v", v.BoolField)
	i++
	fields[i] = fmt.Sprintf("ByteField: %v", v.ByteField)
	i++
	fields[i] = fmt.Sprintf("Int16Field: %v", v.Int16Field)
	i++
	fields[i] = fmt.Sprintf("Int32Field: %v", v.Int32Field)
	i++
	fields[i] = fmt.Sprintf("Int64Field: %v", v.Int64Field)
	i++
	fields[i] = fmt.Sprintf("DoubleField: %v", v.DoubleField)
	i++
	fields[i] = fmt.Sprintf("StringField: %v", v.StringField)
	i++
	fields[i] = fmt.Sprintf("BinaryField: %v", v.BinaryField)
	i++
	return fmt.Sprintf("PrimitiveRequiredStruct{%v}", strings.Join(fields[:i], ", "))
}

type Size struct {
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

func (v *Size) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueDouble(v.Width)}
	i++
	fields[i] = wire.Field{ID: 2, Value: wire.NewValueDouble(v.Height)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *Size) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TDouble {
				v.Width, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TDouble {
				v.Height, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Size) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Width: %v", v.Width)
	i++
	fields[i] = fmt.Sprintf("Height: %v", v.Height)
	i++
	return fmt.Sprintf("Size{%v}", strings.Join(fields[:i], ", "))
}

type User struct {
	Name    string       `json:"name"`
	Contact *ContactInfo `json:"contact,omitempty"`
}

func (v *User) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	fields[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.Name)}
	i++
	if v.Contact != nil {
		fields[i] = wire.Field{ID: 2, Value: v.Contact.ToWire()}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func _ContactInfo_Read(w wire.Value) (*ContactInfo, error) {
	var v ContactInfo
	err := v.FromWire(w)
	return &v, err
}

func (v *User) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Name, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Contact, err = _ContactInfo_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *User) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Name: %v", v.Name)
	i++
	if v.Contact != nil {
		fields[i] = fmt.Sprintf("Contact: %v", v.Contact)
		i++
	}
	return fmt.Sprintf("User{%v}", strings.Join(fields[:i], ", "))
}
