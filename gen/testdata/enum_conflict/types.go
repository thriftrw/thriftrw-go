// Code generated by thriftrw v1.1.0
// @generated

package enum_conflict

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go.uber.org/thriftrw/gen/testdata/enums"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type RecordType int32

const (
	RecordTypeName  RecordType = 0
	RecordTypeEmail RecordType = 1
)

func (v RecordType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *RecordType) FromWire(w wire.Value) error {
	*v = (RecordType)(w.GetI32())
	return nil
}

func (v RecordType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "Name"
	case 1:
		return "Email"
	}
	return fmt.Sprintf("RecordType(%d)", w)
}

func (v RecordType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"Name\""), nil
	case 1:
		return ([]byte)("\"Email\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *RecordType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "RecordType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "RecordType")
		}
		*v = (RecordType)(x)
		return nil
	case string:
		switch w {
		case "Name":
			*v = RecordTypeName
			return nil
		case "Email":
			*v = RecordTypeEmail
			return nil
		default:
			return fmt.Errorf("unknown enum value %q for %q", w, "RecordType")
		}
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "RecordType")
	}
}

type Records struct {
	RecordType      *RecordType       `json:"recordType,omitempty"`
	OtherRecordType *enums.RecordType `json:"otherRecordType,omitempty"`
}

func _RecordType_ptr(v RecordType) *RecordType {
	return &v
}

func _RecordType_1_ptr(v enums.RecordType) *enums.RecordType {
	return &v
}

func (v *Records) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.RecordType == nil {
		v.RecordType = _RecordType_ptr(DefaultRecordType)
	}
	{
		w, err = v.RecordType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.OtherRecordType == nil {
		v.OtherRecordType = _RecordType_1_ptr(DefaultOtherRecordType)
	}
	{
		w, err = v.OtherRecordType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _RecordType_Read(w wire.Value) (RecordType, error) {
	var v RecordType
	err := v.FromWire(w)
	return v, err
}

func _RecordType_1_Read(w wire.Value) (enums.RecordType, error) {
	var v enums.RecordType
	err := v.FromWire(w)
	return v, err
}

func (v *Records) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x RecordType
				x, err = _RecordType_Read(field.Value)
				v.RecordType = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				var x enums.RecordType
				x, err = _RecordType_1_Read(field.Value)
				v.OtherRecordType = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if v.RecordType == nil {
		v.RecordType = _RecordType_ptr(DefaultRecordType)
	}
	if v.OtherRecordType == nil {
		v.OtherRecordType = _RecordType_1_ptr(DefaultOtherRecordType)
	}
	return nil
}

func (v *Records) String() string {
	var fields [2]string
	i := 0
	if v.RecordType != nil {
		fields[i] = fmt.Sprintf("RecordType: %v", *(v.RecordType))
		i++
	}
	if v.OtherRecordType != nil {
		fields[i] = fmt.Sprintf("OtherRecordType: %v", *(v.OtherRecordType))
		i++
	}
	return fmt.Sprintf("Records{%v}", strings.Join(fields[:i], ", "))
}
