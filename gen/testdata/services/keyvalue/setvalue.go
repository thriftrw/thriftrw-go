// Code generated by thriftrw

package keyvalue

import (
	"fmt"
	"github.com/thriftrw/thriftrw-go/gen/testdata/services"
	"github.com/thriftrw/thriftrw-go/gen/testdata/unions"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type SetValueArgs struct {
	Key   *services.Key
	Value *unions.ArbitraryValue
}

func (v *SetValueArgs) ToWire() wire.Value {
	var fields [2]wire.Field
	i := 0
	if v.Key != nil {
		fields[i] = wire.Field{ID: 1, Value: v.Key.ToWire()}
		i++
	}
	if v.Value != nil {
		fields[i] = wire.Field{ID: 2, Value: v.Value.ToWire()}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}
func (v *SetValueArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x services.Key
				x, err = _Key_Read(field.Value)
				v.Key = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _ArbitraryValue_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func (v *SetValueArgs) String() string {
	var fields [2]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", v.Value)
		i++
	}
	return fmt.Sprintf("SetValueArgs{%v}", strings.Join(fields[:i], ", "))
}

type SetValueResult struct{}

func (v *SetValueResult) ToWire() wire.Value {
	var fields [0]wire.Field
	i := 0
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}
func (v *SetValueResult) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}
func (v *SetValueResult) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("SetValueResult{%v}", strings.Join(fields[:i], ", "))
}

var SetValue = struct {
	IsException    func(error) bool
	Args           func(key *services.Key, value *unions.ArbitraryValue) *SetValueArgs
	WrapResponse   func(error) (*SetValueResult, error)
	UnwrapResponse func(*SetValueResult) error
}{}

func init() {
	SetValue.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	SetValue.Args = func(key *services.Key, value *unions.ArbitraryValue) *SetValueArgs {
		return &SetValueArgs{Key: key, Value: value}
	}
	SetValue.WrapResponse = func(err error) (*SetValueResult, error) {
		if err == nil {
			return &SetValueResult{}, nil
		}
		return nil, err
	}
	SetValue.UnwrapResponse = func(result *SetValueResult) (err error) {
		return
	}
}
