// Code generated by thriftrw v0.4.0
// @generated

package cache

import (
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type ClearAfterArgs struct {
	DurationMS *int64 `json:"durationMS,omitempty"`
}

func (v *ClearAfterArgs) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.DurationMS != nil {
		w, err = wire.NewValueI64(*(v.DurationMS)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ClearAfterArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DurationMS = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ClearAfterArgs) String() string {
	var fields [1]string
	i := 0
	if v.DurationMS != nil {
		fields[i] = fmt.Sprintf("DurationMS: %v", *(v.DurationMS))
		i++
	}
	return fmt.Sprintf("ClearAfterArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *ClearAfterArgs) MethodName() string {
	return "clearAfter"
}

func (v *ClearAfterArgs) EnvelopeType() wire.EnvelopeType {
	return wire.OneWay
}

var ClearAfterHelper = struct {
	Args func(durationMS *int64) *ClearAfterArgs
}{}

func init() {
	ClearAfterHelper.Args = func(durationMS *int64) *ClearAfterArgs {
		return &ClearAfterArgs{DurationMS: durationMS}
	}
}
