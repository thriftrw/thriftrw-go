// Code generated by thriftrw v1.3.0
// @generated

package services

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/gen/testdata/unions"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type KeyValue_SetValueV2_Args struct {
	Key   Key                    `json:"key,required"`
	Value *unions.ArbitraryValue `json:"value,required"`
}

func (v *KeyValue_SetValueV2_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = v.Key.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Value == nil {
		return w, errors.New("field Value of KeyValue_SetValueV2_Args is required")
	}
	w, err = v.Value.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *KeyValue_SetValueV2_Args) FromWire(w wire.Value) error {
	var err error
	keyIsSet := false
	valueIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = _Key_Read(field.Value)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _ArbitraryValue_Read(field.Value)
				if err != nil {
					return err
				}
				valueIsSet = true
			}
		}
	}
	if !keyIsSet {
		return errors.New("field Key of KeyValue_SetValueV2_Args is required")
	}
	if !valueIsSet {
		return errors.New("field Value of KeyValue_SetValueV2_Args is required")
	}
	return nil
}

func (v *KeyValue_SetValueV2_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	fields[i] = fmt.Sprintf("Value: %v", v.Value)
	i++
	return fmt.Sprintf("KeyValue_SetValueV2_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *KeyValue_SetValueV2_Args) Equals(rhs *KeyValue_SetValueV2_Args) bool {
	if !(v.Key == rhs.Key) {
		return false
	}
	if !v.Value.Equals(rhs.Value) {
		return false
	}
	return true
}

func (v *KeyValue_SetValueV2_Args) MethodName() string {
	return "setValueV2"
}

func (v *KeyValue_SetValueV2_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var KeyValue_SetValueV2_Helper = struct {
	Args           func(key Key, value *unions.ArbitraryValue) *KeyValue_SetValueV2_Args
	IsException    func(error) bool
	WrapResponse   func(error) (*KeyValue_SetValueV2_Result, error)
	UnwrapResponse func(*KeyValue_SetValueV2_Result) error
}{}

func init() {
	KeyValue_SetValueV2_Helper.Args = func(key Key, value *unions.ArbitraryValue) *KeyValue_SetValueV2_Args {
		return &KeyValue_SetValueV2_Args{Key: key, Value: value}
	}
	KeyValue_SetValueV2_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	KeyValue_SetValueV2_Helper.WrapResponse = func(err error) (*KeyValue_SetValueV2_Result, error) {
		if err == nil {
			return &KeyValue_SetValueV2_Result{}, nil
		}
		return nil, err
	}
	KeyValue_SetValueV2_Helper.UnwrapResponse = func(result *KeyValue_SetValueV2_Result) (err error) {
		return
	}
}

type KeyValue_SetValueV2_Result struct{}

func (v *KeyValue_SetValueV2_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *KeyValue_SetValueV2_Result) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *KeyValue_SetValueV2_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("KeyValue_SetValueV2_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *KeyValue_SetValueV2_Result) Equals(rhs *KeyValue_SetValueV2_Result) bool {
	return true
}

func (v *KeyValue_SetValueV2_Result) MethodName() string {
	return "setValueV2"
}

func (v *KeyValue_SetValueV2_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
