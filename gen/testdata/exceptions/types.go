// Code generated by thriftrw
// @generated

package exceptions

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type DoesNotExistException struct {
	Key string `json:"key"`
}

func (v *DoesNotExistException) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Key), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DoesNotExistException) FromWire(w wire.Value) error {
	var err error
	keyIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		}
	}
	if !keyIsSet {
		return errors.New("field Key of DoesNotExistException is required")
	}
	return nil
}

func (v *DoesNotExistException) String() string {
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	return fmt.Sprintf("DoesNotExistException{%v}", strings.Join(fields[:i], ", "))
}

func (v *DoesNotExistException) Error() string {
	return v.String()
}

type EmptyException struct{}

func (v *EmptyException) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *EmptyException) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *EmptyException) String() string {
	var fields [0]string
	i := 0
	return fmt.Sprintf("EmptyException{%v}", strings.Join(fields[:i], ", "))
}

func (v *EmptyException) Error() string {
	return v.String()
}
