// Code generated by thriftrw v1.3.0
// @generated

package exceptions

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type DoesNotExistException struct {
	Key    string  `json:"key,required"`
	Error2 *string `json:"Error,omitempty"`
}

func (v *DoesNotExistException) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Key), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Error2 != nil {
		w, err = wire.NewValueString(*(v.Error2)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DoesNotExistException) FromWire(w wire.Value) error {
	var err error
	keyIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Error2 = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if !keyIsSet {
		return errors.New("field Key of DoesNotExistException is required")
	}
	return nil
}

func (v *DoesNotExistException) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	if v.Error2 != nil {
		fields[i] = fmt.Sprintf("Error2: %v", *(v.Error2))
		i++
	}
	return fmt.Sprintf("DoesNotExistException{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *DoesNotExistException) Equals(rhs *DoesNotExistException) bool {
	if !(v.Key == rhs.Key) {
		return false
	}
	if !_String_EqualsPtr(v.Error2, rhs.Error2) {
		return false
	}
	return true
}

func (v *DoesNotExistException) Error() string {
	return v.String()
}

type EmptyException struct{}

func (v *EmptyException) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *EmptyException) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *EmptyException) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("EmptyException{%v}", strings.Join(fields[:i], ", "))
}

func (v *EmptyException) Equals(rhs *EmptyException) bool {
	return true
}

func (v *EmptyException) Error() string {
	return v.String()
}
