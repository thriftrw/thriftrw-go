// Code generated by thriftrw v1.13.0. DO NOT EDIT.
// @generated

package containers

import (
	"go.uber.org/thriftrw/gen/internal/tests/enum_conflict"
	"go.uber.org/thriftrw/gen/internal/tests/enums"
	"go.uber.org/thriftrw/gen/internal/tests/typedefs"
	"go.uber.org/thriftrw/gen/internal/tests/uuid_conflict"
	"go.uber.org/thriftrw/thriftreflect"
)

// ThriftModule represents the IDL file used to generate this package.
var ThriftModule = &thriftreflect.ThriftModule{
	Name:     "containers",
	Package:  "go.uber.org/thriftrw/gen/internal/tests/containers",
	FilePath: "containers.thrift",
	SHA1:     "bb2b06a31ccbbcfce43163a9b0d50f109e21a24b",
	Includes: []*thriftreflect.ThriftModule{
		enum_conflict.ThriftModule,
		enums.ThriftModule,
		typedefs.ThriftModule,
		uuid_conflict.ThriftModule,
	},
	Raw: rawIDL,
}

const rawIDL = "include \"./enums.thrift\"\ninclude \"./enum_conflict.thrift\"\ninclude \"./typedefs.thrift\"\ninclude \"./uuid_conflict.thrift\"\n\nstruct PrimitiveContainers {\n    1: optional list<binary> listOfBinary\n    2: optional list<i64> listOfInts\n    3: optional set<string> setOfStrings\n    4: optional set<byte> setOfBytes\n    5: optional map<i32, string> mapOfIntToString\n    6: optional map<string, bool> mapOfStringToBool\n}\n\nstruct PrimitiveContainersRequired {\n    1: required list<string> listOfStrings\n    2: required set<i32> setOfInts\n    3: required map<i64, double> mapOfIntsToDoubles\n}\n\nstruct EnumContainers {\n    1: optional list<enums.EnumDefault> listOfEnums\n    2: optional set<enums.EnumWithValues> setOfEnums\n    3: optional map<enums.EnumWithDuplicateValues, i32> mapOfEnums\n}\n\nstruct ContainersOfContainers {\n    1: optional list<list<i32>> listOfLists;\n    2: optional list<set<i32>> listOfSets;\n    3: optional list<map<i32, i32>> listOfMaps;\n\n    4: optional set<set<string>> setOfSets;\n    5: optional set<list<string>> setOfLists;\n    6: optional set<map<string, string>> setOfMaps;\n\n    7: optional map<map<string, i32>, i64> mapOfMapToInt;\n    8: optional map<list<i32>, set<i64>> mapOfListToSet;\n    9: optional map<set<i32>, list<double>> mapOfSetToListOfDouble;\n}\n\nstruct MapOfBinaryAndString {\n    1: optional map<binary, string> binaryToString;\n    2: optional map<string, binary> stringToBinary;\n}\n\nstruct ListOfConflictingEnums {\n    1: required list<enum_conflict.RecordType> records\n    2: required list<enums.RecordType> otherRecords\n}\n\nstruct ListOfConflictingUUIDs {\n    1: required list<typedefs.UUID> uuids\n    2: required list<uuid_conflict.UUID> otherUUIDs\n}\n"
