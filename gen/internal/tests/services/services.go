// Code generated by thriftrw v1.20.0. DO NOT EDIT.
// @generated

package services

import (
	bytes "bytes"
	base64 "encoding/base64"
	errors "errors"
	fmt "fmt"
	multierr "go.uber.org/multierr"
	exceptions "go.uber.org/thriftrw/gen/internal/tests/exceptions"
	unions "go.uber.org/thriftrw/gen/internal/tests/unions"
	thriftreflect "go.uber.org/thriftrw/thriftreflect"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
	strings "strings"
)

type ConflictingNamesSetValueArgs struct {
	Key   string `json:"key,required"`
	Value []byte `json:"value,required"`
}

// ToWire translates a ConflictingNamesSetValueArgs struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ConflictingNamesSetValueArgs) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Key), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Value == nil {
		return w, errors.New("field Value of ConflictingNamesSetValueArgs is required")
	}
	w, err = wire.NewValueBinary(v.Value), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ConflictingNamesSetValueArgs struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ConflictingNamesSetValueArgs struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ConflictingNamesSetValueArgs
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ConflictingNamesSetValueArgs) FromWire(w wire.Value) error {
	var err error

	keyIsSet := false
	valueIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.Value, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
				valueIsSet = true
			}
		}
	}

	if !keyIsSet {
		return errors.New("field Key of ConflictingNamesSetValueArgs is required")
	}

	if !valueIsSet {
		return errors.New("field Value of ConflictingNamesSetValueArgs is required")
	}

	return nil
}

// String returns a readable string representation of a ConflictingNamesSetValueArgs
// struct.
func (v *ConflictingNamesSetValueArgs) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	fields[i] = fmt.Sprintf("Value: %v", v.Value)
	i++

	return fmt.Sprintf("ConflictingNamesSetValueArgs{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ConflictingNamesSetValueArgs match the
// provided ConflictingNamesSetValueArgs.
//
// This function performs a deep comparison.
func (v *ConflictingNamesSetValueArgs) Equals(rhs *ConflictingNamesSetValueArgs) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Key == rhs.Key) {
		return false
	}
	if !bytes.Equal(v.Value, rhs.Value) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ConflictingNamesSetValueArgs.
func (v *ConflictingNamesSetValueArgs) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("key", v.Key)
	enc.AddString("value", base64.StdEncoding.EncodeToString(v.Value))
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *ConflictingNamesSetValueArgs) GetKey() (o string) {
	if v != nil {
		o = v.Key
	}
	return
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *ConflictingNamesSetValueArgs) GetValue() (o []byte) {
	if v != nil {
		o = v.Value
	}
	return
}

// IsSetValue returns true if Value is not nil.
func (v *ConflictingNamesSetValueArgs) IsSetValue() bool {
	return v != nil && v.Value != nil
}

type InternalError struct {
	Message *string `json:"message,omitempty"`
}

// ToWire translates a InternalError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *InternalError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a InternalError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a InternalError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v InternalError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *InternalError) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a InternalError
// struct.
func (v *InternalError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}

	return fmt.Sprintf("InternalError{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this InternalError match the
// provided InternalError.
//
// This function performs a deep comparison.
func (v *InternalError) Equals(rhs *InternalError) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_String_EqualsPtr(v.Message, rhs.Message) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of InternalError.
func (v *InternalError) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Message != nil {
		enc.AddString("message", *v.Message)
	}
	return err
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *InternalError) GetMessage() (o string) {
	if v != nil && v.Message != nil {
		return *v.Message
	}

	return
}

// IsSetMessage returns true if Message is not nil.
func (v *InternalError) IsSetMessage() bool {
	return v != nil && v.Message != nil
}

func (v *InternalError) Error() string {
	return v.String()
}

type Key string

// KeyPtr returns a pointer to a Key
func (v Key) Ptr() *Key {
	return &v
}

// ToWire translates Key into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v Key) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

// String returns a readable string representation of Key.
func (v Key) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes Key from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *Key) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (Key)(x)
	return err
}

// Equals returns true if this Key is equal to the provided
// Key.
func (lhs Key) Equals(rhs Key) bool {
	return ((string)(lhs) == (string)(rhs))
}

// ThriftModule represents the IDL file used to generate this package.
var ThriftModule = &thriftreflect.ThriftModule{
	Name:     "services",
	Package:  "go.uber.org/thriftrw/gen/internal/tests/services",
	FilePath: "services.thrift",
	SHA1:     "22d2183c133fb327925d7288a6191b17e8f28175",
	Includes: []*thriftreflect.ThriftModule{
		exceptions.ThriftModule,
		unions.ThriftModule,
	},
	Raw: rawIDL,
}

const rawIDL = "include \"./unions.thrift\"\ninclude \"./exceptions.thrift\"\n\ntypedef string Key\n\nexception InternalError {\n    1: optional string message\n}\n\nservice KeyValue {\n    // void and no exceptions\n    void setValue(1: Key key, 2: unions.ArbitraryValue value)\n\n    void setValueV2(\n        /** Key to change. */\n        1: required Key key,\n        /**\n         * New value for the key.\n         *\n         * If the key already has an existing value, it will be overwritten.\n         */\n        2: required unions.ArbitraryValue value,\n    )\n\n    // Return with exceptions\n    unions.ArbitraryValue getValue(1: Key key)\n        throws (1: exceptions.DoesNotExistException doesNotExist)\n\n    // void with exceptions\n    void deleteValue(1: Key key)\n        throws (\n            /**\n             * Raised if a value with the given key doesn't exist.\n             */\n            1: exceptions.DoesNotExistException doesNotExist,\n            2: InternalError internalError\n        )\n\n    list<unions.ArbitraryValue> getManyValues(\n        1: list<Key> range  // < reserved keyword as an argument\n    ) throws (\n        1: exceptions.DoesNotExistException doesNotExist,\n    )\n\n    i64 size()  // < primitve return value\n}\n\nservice Cache {\n    oneway void clear()\n    oneway void clearAfter(1: i64 durationMS)\n}\n\nstruct ConflictingNames_SetValue_Args {\n    1: required string key\n    2: required binary value\n}\n\nservice ConflictingNames {\n    void setValue(1: ConflictingNames_SetValue_Args request)\n}\n\nservice non_standard_service_name {\n    void non_standard_function_name()\n}\n"

// Cache_Clear_Args represents the arguments for the Cache.clear function.
//
// The arguments for clear are sent and received over the wire as this struct.
type Cache_Clear_Args struct {
}

// ToWire translates a Cache_Clear_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Cache_Clear_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Cache_Clear_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Cache_Clear_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Cache_Clear_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Cache_Clear_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a Cache_Clear_Args
// struct.
func (v *Cache_Clear_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("Cache_Clear_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Cache_Clear_Args match the
// provided Cache_Clear_Args.
//
// This function performs a deep comparison.
func (v *Cache_Clear_Args) Equals(rhs *Cache_Clear_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Cache_Clear_Args.
func (v *Cache_Clear_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "clear" for this struct.
func (v *Cache_Clear_Args) MethodName() string {
	return "clear"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be OneWay for this struct.
func (v *Cache_Clear_Args) EnvelopeType() wire.EnvelopeType {
	return wire.OneWay
}

// Cache_Clear_Helper provides functions that aid in handling the
// parameters and return values of the Cache.clear
// function.
var Cache_Clear_Helper = struct {
	// Args accepts the parameters of clear in-order and returns
	// the arguments struct for the function.
	Args func() *Cache_Clear_Args
}{}

func init() {
	Cache_Clear_Helper.Args = func() *Cache_Clear_Args {
		return &Cache_Clear_Args{}
	}

}

// Cache_ClearAfter_Args represents the arguments for the Cache.clearAfter function.
//
// The arguments for clearAfter are sent and received over the wire as this struct.
type Cache_ClearAfter_Args struct {
	DurationMS *int64 `json:"durationMS,omitempty"`
}

// ToWire translates a Cache_ClearAfter_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Cache_ClearAfter_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.DurationMS != nil {
		w, err = wire.NewValueI64(*(v.DurationMS)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Cache_ClearAfter_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Cache_ClearAfter_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Cache_ClearAfter_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Cache_ClearAfter_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.DurationMS = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a Cache_ClearAfter_Args
// struct.
func (v *Cache_ClearAfter_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.DurationMS != nil {
		fields[i] = fmt.Sprintf("DurationMS: %v", *(v.DurationMS))
		i++
	}

	return fmt.Sprintf("Cache_ClearAfter_Args{%v}", strings.Join(fields[:i], ", "))
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this Cache_ClearAfter_Args match the
// provided Cache_ClearAfter_Args.
//
// This function performs a deep comparison.
func (v *Cache_ClearAfter_Args) Equals(rhs *Cache_ClearAfter_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_I64_EqualsPtr(v.DurationMS, rhs.DurationMS) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Cache_ClearAfter_Args.
func (v *Cache_ClearAfter_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.DurationMS != nil {
		enc.AddInt64("durationMS", *v.DurationMS)
	}
	return err
}

// GetDurationMS returns the value of DurationMS if it is set or its
// zero value if it is unset.
func (v *Cache_ClearAfter_Args) GetDurationMS() (o int64) {
	if v != nil && v.DurationMS != nil {
		return *v.DurationMS
	}

	return
}

// IsSetDurationMS returns true if DurationMS is not nil.
func (v *Cache_ClearAfter_Args) IsSetDurationMS() bool {
	return v != nil && v.DurationMS != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "clearAfter" for this struct.
func (v *Cache_ClearAfter_Args) MethodName() string {
	return "clearAfter"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be OneWay for this struct.
func (v *Cache_ClearAfter_Args) EnvelopeType() wire.EnvelopeType {
	return wire.OneWay
}

// Cache_ClearAfter_Helper provides functions that aid in handling the
// parameters and return values of the Cache.clearAfter
// function.
var Cache_ClearAfter_Helper = struct {
	// Args accepts the parameters of clearAfter in-order and returns
	// the arguments struct for the function.
	Args func(
		durationMS *int64,
	) *Cache_ClearAfter_Args
}{}

func init() {
	Cache_ClearAfter_Helper.Args = func(
		durationMS *int64,
	) *Cache_ClearAfter_Args {
		return &Cache_ClearAfter_Args{
			DurationMS: durationMS,
		}
	}

}

// ConflictingNames_SetValue_Args represents the arguments for the ConflictingNames.setValue function.
//
// The arguments for setValue are sent and received over the wire as this struct.
type ConflictingNames_SetValue_Args struct {
	Request *ConflictingNamesSetValueArgs `json:"request,omitempty"`
}

// ToWire translates a ConflictingNames_SetValue_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ConflictingNames_SetValue_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Request != nil {
		w, err = v.Request.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ConflictingNamesSetValueArgs_Read(w wire.Value) (*ConflictingNamesSetValueArgs, error) {
	var v ConflictingNamesSetValueArgs
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a ConflictingNames_SetValue_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ConflictingNames_SetValue_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ConflictingNames_SetValue_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ConflictingNames_SetValue_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Request, err = _ConflictingNamesSetValueArgs_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ConflictingNames_SetValue_Args
// struct.
func (v *ConflictingNames_SetValue_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Request != nil {
		fields[i] = fmt.Sprintf("Request: %v", v.Request)
		i++
	}

	return fmt.Sprintf("ConflictingNames_SetValue_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ConflictingNames_SetValue_Args match the
// provided ConflictingNames_SetValue_Args.
//
// This function performs a deep comparison.
func (v *ConflictingNames_SetValue_Args) Equals(rhs *ConflictingNames_SetValue_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Request == nil && rhs.Request == nil) || (v.Request != nil && rhs.Request != nil && v.Request.Equals(rhs.Request))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ConflictingNames_SetValue_Args.
func (v *ConflictingNames_SetValue_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Request != nil {
		err = multierr.Append(err, enc.AddObject("request", v.Request))
	}
	return err
}

// GetRequest returns the value of Request if it is set or its
// zero value if it is unset.
func (v *ConflictingNames_SetValue_Args) GetRequest() (o *ConflictingNamesSetValueArgs) {
	if v != nil && v.Request != nil {
		return v.Request
	}

	return
}

// IsSetRequest returns true if Request is not nil.
func (v *ConflictingNames_SetValue_Args) IsSetRequest() bool {
	return v != nil && v.Request != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "setValue" for this struct.
func (v *ConflictingNames_SetValue_Args) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *ConflictingNames_SetValue_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// ConflictingNames_SetValue_Helper provides functions that aid in handling the
// parameters and return values of the ConflictingNames.setValue
// function.
var ConflictingNames_SetValue_Helper = struct {
	// Args accepts the parameters of setValue in-order and returns
	// the arguments struct for the function.
	Args func(
		request *ConflictingNamesSetValueArgs,
	) *ConflictingNames_SetValue_Args

	// IsException returns true if the given error can be thrown
	// by setValue.
	//
	// An error can be thrown by setValue only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for setValue
	// given the error returned by it. The provided error may
	// be nil if setValue did not fail.
	//
	// This allows mapping errors returned by setValue into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// setValue
	//
	//   err := setValue(args)
	//   result, err := ConflictingNames_SetValue_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from setValue: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*ConflictingNames_SetValue_Result, error)

	// UnwrapResponse takes the result struct for setValue
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if setValue threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := ConflictingNames_SetValue_Helper.UnwrapResponse(result)
	UnwrapResponse func(*ConflictingNames_SetValue_Result) error
}{}

func init() {
	ConflictingNames_SetValue_Helper.Args = func(
		request *ConflictingNamesSetValueArgs,
	) *ConflictingNames_SetValue_Args {
		return &ConflictingNames_SetValue_Args{
			Request: request,
		}
	}

	ConflictingNames_SetValue_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	ConflictingNames_SetValue_Helper.WrapResponse = func(err error) (*ConflictingNames_SetValue_Result, error) {
		if err == nil {
			return &ConflictingNames_SetValue_Result{}, nil
		}

		return nil, err
	}
	ConflictingNames_SetValue_Helper.UnwrapResponse = func(result *ConflictingNames_SetValue_Result) (err error) {
		return
	}

}

// ConflictingNames_SetValue_Result represents the result of a ConflictingNames.setValue function call.
//
// The result of a setValue execution is sent and received over the wire as this struct.
type ConflictingNames_SetValue_Result struct {
}

// ToWire translates a ConflictingNames_SetValue_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ConflictingNames_SetValue_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ConflictingNames_SetValue_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ConflictingNames_SetValue_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ConflictingNames_SetValue_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ConflictingNames_SetValue_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a ConflictingNames_SetValue_Result
// struct.
func (v *ConflictingNames_SetValue_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("ConflictingNames_SetValue_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ConflictingNames_SetValue_Result match the
// provided ConflictingNames_SetValue_Result.
//
// This function performs a deep comparison.
func (v *ConflictingNames_SetValue_Result) Equals(rhs *ConflictingNames_SetValue_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ConflictingNames_SetValue_Result.
func (v *ConflictingNames_SetValue_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "setValue" for this struct.
func (v *ConflictingNames_SetValue_Result) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *ConflictingNames_SetValue_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_DeleteValue_Args represents the arguments for the KeyValue.deleteValue function.
//
// The arguments for deleteValue are sent and received over the wire as this struct.
type KeyValue_DeleteValue_Args struct {
	Key *Key `json:"key,omitempty"`
}

// ToWire translates a KeyValue_DeleteValue_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_DeleteValue_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = v.Key.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Key_Read(w wire.Value) (Key, error) {
	var x Key
	err := x.FromWire(w)
	return x, err
}

// FromWire deserializes a KeyValue_DeleteValue_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_DeleteValue_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_DeleteValue_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_DeleteValue_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Key
				x, err = _Key_Read(field.Value)
				v.Key = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_DeleteValue_Args
// struct.
func (v *KeyValue_DeleteValue_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}

	return fmt.Sprintf("KeyValue_DeleteValue_Args{%v}", strings.Join(fields[:i], ", "))
}

func _Key_EqualsPtr(lhs, rhs *Key) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this KeyValue_DeleteValue_Args match the
// provided KeyValue_DeleteValue_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_DeleteValue_Args) Equals(rhs *KeyValue_DeleteValue_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Key_EqualsPtr(v.Key, rhs.Key) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_DeleteValue_Args.
func (v *KeyValue_DeleteValue_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Key != nil {
		enc.AddString("key", (string)(*v.Key))
	}
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *KeyValue_DeleteValue_Args) GetKey() (o Key) {
	if v != nil && v.Key != nil {
		return *v.Key
	}

	return
}

// IsSetKey returns true if Key is not nil.
func (v *KeyValue_DeleteValue_Args) IsSetKey() bool {
	return v != nil && v.Key != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "deleteValue" for this struct.
func (v *KeyValue_DeleteValue_Args) MethodName() string {
	return "deleteValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_DeleteValue_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_DeleteValue_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.deleteValue
// function.
var KeyValue_DeleteValue_Helper = struct {
	// Args accepts the parameters of deleteValue in-order and returns
	// the arguments struct for the function.
	Args func(
		key *Key,
	) *KeyValue_DeleteValue_Args

	// IsException returns true if the given error can be thrown
	// by deleteValue.
	//
	// An error can be thrown by deleteValue only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for deleteValue
	// given the error returned by it. The provided error may
	// be nil if deleteValue did not fail.
	//
	// This allows mapping errors returned by deleteValue into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// deleteValue
	//
	//   err := deleteValue(args)
	//   result, err := KeyValue_DeleteValue_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from deleteValue: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*KeyValue_DeleteValue_Result, error)

	// UnwrapResponse takes the result struct for deleteValue
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if deleteValue threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := KeyValue_DeleteValue_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_DeleteValue_Result) error
}{}

func init() {
	KeyValue_DeleteValue_Helper.Args = func(
		key *Key,
	) *KeyValue_DeleteValue_Args {
		return &KeyValue_DeleteValue_Args{
			Key: key,
		}
	}

	KeyValue_DeleteValue_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *exceptions.DoesNotExistException:
			return true
		case *InternalError:
			return true
		default:
			return false
		}
	}

	KeyValue_DeleteValue_Helper.WrapResponse = func(err error) (*KeyValue_DeleteValue_Result, error) {
		if err == nil {
			return &KeyValue_DeleteValue_Result{}, nil
		}

		switch e := err.(type) {
		case *exceptions.DoesNotExistException:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for KeyValue_DeleteValue_Result.DoesNotExist")
			}
			return &KeyValue_DeleteValue_Result{DoesNotExist: e}, nil
		case *InternalError:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for KeyValue_DeleteValue_Result.InternalError")
			}
			return &KeyValue_DeleteValue_Result{InternalError: e}, nil
		}

		return nil, err
	}
	KeyValue_DeleteValue_Helper.UnwrapResponse = func(result *KeyValue_DeleteValue_Result) (err error) {
		if result.DoesNotExist != nil {
			err = result.DoesNotExist
			return
		}
		if result.InternalError != nil {
			err = result.InternalError
			return
		}
		return
	}

}

// KeyValue_DeleteValue_Result represents the result of a KeyValue.deleteValue function call.
//
// The result of a deleteValue execution is sent and received over the wire as this struct.
type KeyValue_DeleteValue_Result struct {
	// Raised if a value with the given key doesn't exist.
	DoesNotExist  *exceptions.DoesNotExistException `json:"doesNotExist,omitempty"`
	InternalError *InternalError                    `json:"internalError,omitempty"`
}

// ToWire translates a KeyValue_DeleteValue_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_DeleteValue_Result) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.DoesNotExist != nil {
		w, err = v.DoesNotExist.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.InternalError != nil {
		w, err = v.InternalError.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	if i > 1 {
		return wire.Value{}, fmt.Errorf("KeyValue_DeleteValue_Result should have at most one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DoesNotExistException_Read(w wire.Value) (*exceptions.DoesNotExistException, error) {
	var v exceptions.DoesNotExistException
	err := v.FromWire(w)
	return &v, err
}

func _InternalError_Read(w wire.Value) (*InternalError, error) {
	var v InternalError
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a KeyValue_DeleteValue_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_DeleteValue_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_DeleteValue_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_DeleteValue_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.DoesNotExist, err = _DoesNotExistException_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.InternalError, err = _InternalError_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.DoesNotExist != nil {
		count++
	}
	if v.InternalError != nil {
		count++
	}
	if count > 1 {
		return fmt.Errorf("KeyValue_DeleteValue_Result should have at most one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a KeyValue_DeleteValue_Result
// struct.
func (v *KeyValue_DeleteValue_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.DoesNotExist != nil {
		fields[i] = fmt.Sprintf("DoesNotExist: %v", v.DoesNotExist)
		i++
	}
	if v.InternalError != nil {
		fields[i] = fmt.Sprintf("InternalError: %v", v.InternalError)
		i++
	}

	return fmt.Sprintf("KeyValue_DeleteValue_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_DeleteValue_Result match the
// provided KeyValue_DeleteValue_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_DeleteValue_Result) Equals(rhs *KeyValue_DeleteValue_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.DoesNotExist == nil && rhs.DoesNotExist == nil) || (v.DoesNotExist != nil && rhs.DoesNotExist != nil && v.DoesNotExist.Equals(rhs.DoesNotExist))) {
		return false
	}
	if !((v.InternalError == nil && rhs.InternalError == nil) || (v.InternalError != nil && rhs.InternalError != nil && v.InternalError.Equals(rhs.InternalError))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_DeleteValue_Result.
func (v *KeyValue_DeleteValue_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.DoesNotExist != nil {
		err = multierr.Append(err, enc.AddObject("doesNotExist", v.DoesNotExist))
	}
	if v.InternalError != nil {
		err = multierr.Append(err, enc.AddObject("internalError", v.InternalError))
	}
	return err
}

// GetDoesNotExist returns the value of DoesNotExist if it is set or its
// zero value if it is unset.
func (v *KeyValue_DeleteValue_Result) GetDoesNotExist() (o *exceptions.DoesNotExistException) {
	if v != nil && v.DoesNotExist != nil {
		return v.DoesNotExist
	}

	return
}

// IsSetDoesNotExist returns true if DoesNotExist is not nil.
func (v *KeyValue_DeleteValue_Result) IsSetDoesNotExist() bool {
	return v != nil && v.DoesNotExist != nil
}

// GetInternalError returns the value of InternalError if it is set or its
// zero value if it is unset.
func (v *KeyValue_DeleteValue_Result) GetInternalError() (o *InternalError) {
	if v != nil && v.InternalError != nil {
		return v.InternalError
	}

	return
}

// IsSetInternalError returns true if InternalError is not nil.
func (v *KeyValue_DeleteValue_Result) IsSetInternalError() bool {
	return v != nil && v.InternalError != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "deleteValue" for this struct.
func (v *KeyValue_DeleteValue_Result) MethodName() string {
	return "deleteValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_DeleteValue_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_GetManyValues_Args represents the arguments for the KeyValue.getManyValues function.
//
// The arguments for getManyValues are sent and received over the wire as this struct.
type KeyValue_GetManyValues_Args struct {
	Range []Key `json:"range,omitempty"`
}

type _List_Key_ValueList []Key

func (v _List_Key_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Key_ValueList) Size() int {
	return len(v)
}

func (_List_Key_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_Key_ValueList) Close() {}

// ToWire translates a KeyValue_GetManyValues_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_GetManyValues_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Range != nil {
		w, err = wire.NewValueList(_List_Key_ValueList(v.Range)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_Key_Read(l wire.ValueList) ([]Key, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]Key, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Key_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a KeyValue_GetManyValues_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_GetManyValues_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_GetManyValues_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_GetManyValues_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Range, err = _List_Key_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_GetManyValues_Args
// struct.
func (v *KeyValue_GetManyValues_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Range != nil {
		fields[i] = fmt.Sprintf("Range: %v", v.Range)
		i++
	}

	return fmt.Sprintf("KeyValue_GetManyValues_Args{%v}", strings.Join(fields[:i], ", "))
}

func _List_Key_Equals(lhs, rhs []Key) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this KeyValue_GetManyValues_Args match the
// provided KeyValue_GetManyValues_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_GetManyValues_Args) Equals(rhs *KeyValue_GetManyValues_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Range == nil && rhs.Range == nil) || (v.Range != nil && rhs.Range != nil && _List_Key_Equals(v.Range, rhs.Range))) {
		return false
	}

	return true
}

type _List_Key_Zapper []Key

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_Key_Zapper.
func (l _List_Key_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		enc.AppendString((string)(v))
	}
	return err
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_GetManyValues_Args.
func (v *KeyValue_GetManyValues_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Range != nil {
		err = multierr.Append(err, enc.AddArray("range", (_List_Key_Zapper)(v.Range)))
	}
	return err
}

// GetRange returns the value of Range if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetManyValues_Args) GetRange() (o []Key) {
	if v != nil && v.Range != nil {
		return v.Range
	}

	return
}

// IsSetRange returns true if Range is not nil.
func (v *KeyValue_GetManyValues_Args) IsSetRange() bool {
	return v != nil && v.Range != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getManyValues" for this struct.
func (v *KeyValue_GetManyValues_Args) MethodName() string {
	return "getManyValues"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_GetManyValues_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_GetManyValues_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.getManyValues
// function.
var KeyValue_GetManyValues_Helper = struct {
	// Args accepts the parameters of getManyValues in-order and returns
	// the arguments struct for the function.
	Args func(
		range2 []Key,
	) *KeyValue_GetManyValues_Args

	// IsException returns true if the given error can be thrown
	// by getManyValues.
	//
	// An error can be thrown by getManyValues only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getManyValues
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getManyValues into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getManyValues
	//
	//   value, err := getManyValues(args)
	//   result, err := KeyValue_GetManyValues_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getManyValues: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func([]*unions.ArbitraryValue, error) (*KeyValue_GetManyValues_Result, error)

	// UnwrapResponse takes the result struct for getManyValues
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getManyValues threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := KeyValue_GetManyValues_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_GetManyValues_Result) ([]*unions.ArbitraryValue, error)
}{}

func init() {
	KeyValue_GetManyValues_Helper.Args = func(
		range2 []Key,
	) *KeyValue_GetManyValues_Args {
		return &KeyValue_GetManyValues_Args{
			Range: range2,
		}
	}

	KeyValue_GetManyValues_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *exceptions.DoesNotExistException:
			return true
		default:
			return false
		}
	}

	KeyValue_GetManyValues_Helper.WrapResponse = func(success []*unions.ArbitraryValue, err error) (*KeyValue_GetManyValues_Result, error) {
		if err == nil {
			return &KeyValue_GetManyValues_Result{Success: success}, nil
		}

		switch e := err.(type) {
		case *exceptions.DoesNotExistException:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for KeyValue_GetManyValues_Result.DoesNotExist")
			}
			return &KeyValue_GetManyValues_Result{DoesNotExist: e}, nil
		}

		return nil, err
	}
	KeyValue_GetManyValues_Helper.UnwrapResponse = func(result *KeyValue_GetManyValues_Result) (success []*unions.ArbitraryValue, err error) {
		if result.DoesNotExist != nil {
			err = result.DoesNotExist
			return
		}

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// KeyValue_GetManyValues_Result represents the result of a KeyValue.getManyValues function call.
//
// The result of a getManyValues execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type KeyValue_GetManyValues_Result struct {
	// Value returned by getManyValues after a successful execution.
	Success      []*unions.ArbitraryValue          `json:"success,omitempty"`
	DoesNotExist *exceptions.DoesNotExistException `json:"doesNotExist,omitempty"`
}

type _List_ArbitraryValue_ValueList []*unions.ArbitraryValue

func (v _List_ArbitraryValue_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_ArbitraryValue_ValueList) Size() int {
	return len(v)
}

func (_List_ArbitraryValue_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_ArbitraryValue_ValueList) Close() {}

// ToWire translates a KeyValue_GetManyValues_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_GetManyValues_Result) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueList(_List_ArbitraryValue_ValueList(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if v.DoesNotExist != nil {
		w, err = v.DoesNotExist.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("KeyValue_GetManyValues_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ArbitraryValue_Read(w wire.Value) (*unions.ArbitraryValue, error) {
	var v unions.ArbitraryValue
	err := v.FromWire(w)
	return &v, err
}

func _List_ArbitraryValue_Read(l wire.ValueList) ([]*unions.ArbitraryValue, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*unions.ArbitraryValue, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _ArbitraryValue_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a KeyValue_GetManyValues_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_GetManyValues_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_GetManyValues_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_GetManyValues_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TList {
				v.Success, err = _List_ArbitraryValue_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.DoesNotExist, err = _DoesNotExistException_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.DoesNotExist != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("KeyValue_GetManyValues_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a KeyValue_GetManyValues_Result
// struct.
func (v *KeyValue_GetManyValues_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	if v.DoesNotExist != nil {
		fields[i] = fmt.Sprintf("DoesNotExist: %v", v.DoesNotExist)
		i++
	}

	return fmt.Sprintf("KeyValue_GetManyValues_Result{%v}", strings.Join(fields[:i], ", "))
}

func _List_ArbitraryValue_Equals(lhs, rhs []*unions.ArbitraryValue) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this KeyValue_GetManyValues_Result match the
// provided KeyValue_GetManyValues_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_GetManyValues_Result) Equals(rhs *KeyValue_GetManyValues_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && _List_ArbitraryValue_Equals(v.Success, rhs.Success))) {
		return false
	}
	if !((v.DoesNotExist == nil && rhs.DoesNotExist == nil) || (v.DoesNotExist != nil && rhs.DoesNotExist != nil && v.DoesNotExist.Equals(rhs.DoesNotExist))) {
		return false
	}

	return true
}

type _List_ArbitraryValue_Zapper []*unions.ArbitraryValue

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_ArbitraryValue_Zapper.
func (l _List_ArbitraryValue_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		err = multierr.Append(err, enc.AppendObject(v))
	}
	return err
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_GetManyValues_Result.
func (v *KeyValue_GetManyValues_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddArray("success", (_List_ArbitraryValue_Zapper)(v.Success)))
	}
	if v.DoesNotExist != nil {
		err = multierr.Append(err, enc.AddObject("doesNotExist", v.DoesNotExist))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetManyValues_Result) GetSuccess() (o []*unions.ArbitraryValue) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *KeyValue_GetManyValues_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// GetDoesNotExist returns the value of DoesNotExist if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetManyValues_Result) GetDoesNotExist() (o *exceptions.DoesNotExistException) {
	if v != nil && v.DoesNotExist != nil {
		return v.DoesNotExist
	}

	return
}

// IsSetDoesNotExist returns true if DoesNotExist is not nil.
func (v *KeyValue_GetManyValues_Result) IsSetDoesNotExist() bool {
	return v != nil && v.DoesNotExist != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getManyValues" for this struct.
func (v *KeyValue_GetManyValues_Result) MethodName() string {
	return "getManyValues"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_GetManyValues_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_GetValue_Args represents the arguments for the KeyValue.getValue function.
//
// The arguments for getValue are sent and received over the wire as this struct.
type KeyValue_GetValue_Args struct {
	Key *Key `json:"key,omitempty"`
}

// ToWire translates a KeyValue_GetValue_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_GetValue_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = v.Key.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_GetValue_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_GetValue_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_GetValue_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_GetValue_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Key
				x, err = _Key_Read(field.Value)
				v.Key = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_GetValue_Args
// struct.
func (v *KeyValue_GetValue_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}

	return fmt.Sprintf("KeyValue_GetValue_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_GetValue_Args match the
// provided KeyValue_GetValue_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_GetValue_Args) Equals(rhs *KeyValue_GetValue_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Key_EqualsPtr(v.Key, rhs.Key) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_GetValue_Args.
func (v *KeyValue_GetValue_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Key != nil {
		enc.AddString("key", (string)(*v.Key))
	}
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetValue_Args) GetKey() (o Key) {
	if v != nil && v.Key != nil {
		return *v.Key
	}

	return
}

// IsSetKey returns true if Key is not nil.
func (v *KeyValue_GetValue_Args) IsSetKey() bool {
	return v != nil && v.Key != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getValue" for this struct.
func (v *KeyValue_GetValue_Args) MethodName() string {
	return "getValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_GetValue_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_GetValue_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.getValue
// function.
var KeyValue_GetValue_Helper = struct {
	// Args accepts the parameters of getValue in-order and returns
	// the arguments struct for the function.
	Args func(
		key *Key,
	) *KeyValue_GetValue_Args

	// IsException returns true if the given error can be thrown
	// by getValue.
	//
	// An error can be thrown by getValue only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getValue
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getValue into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getValue
	//
	//   value, err := getValue(args)
	//   result, err := KeyValue_GetValue_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getValue: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*unions.ArbitraryValue, error) (*KeyValue_GetValue_Result, error)

	// UnwrapResponse takes the result struct for getValue
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getValue threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := KeyValue_GetValue_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_GetValue_Result) (*unions.ArbitraryValue, error)
}{}

func init() {
	KeyValue_GetValue_Helper.Args = func(
		key *Key,
	) *KeyValue_GetValue_Args {
		return &KeyValue_GetValue_Args{
			Key: key,
		}
	}

	KeyValue_GetValue_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *exceptions.DoesNotExistException:
			return true
		default:
			return false
		}
	}

	KeyValue_GetValue_Helper.WrapResponse = func(success *unions.ArbitraryValue, err error) (*KeyValue_GetValue_Result, error) {
		if err == nil {
			return &KeyValue_GetValue_Result{Success: success}, nil
		}

		switch e := err.(type) {
		case *exceptions.DoesNotExistException:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for KeyValue_GetValue_Result.DoesNotExist")
			}
			return &KeyValue_GetValue_Result{DoesNotExist: e}, nil
		}

		return nil, err
	}
	KeyValue_GetValue_Helper.UnwrapResponse = func(result *KeyValue_GetValue_Result) (success *unions.ArbitraryValue, err error) {
		if result.DoesNotExist != nil {
			err = result.DoesNotExist
			return
		}

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// KeyValue_GetValue_Result represents the result of a KeyValue.getValue function call.
//
// The result of a getValue execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type KeyValue_GetValue_Result struct {
	// Value returned by getValue after a successful execution.
	Success      *unions.ArbitraryValue            `json:"success,omitempty"`
	DoesNotExist *exceptions.DoesNotExistException `json:"doesNotExist,omitempty"`
}

// ToWire translates a KeyValue_GetValue_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_GetValue_Result) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if v.DoesNotExist != nil {
		w, err = v.DoesNotExist.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("KeyValue_GetValue_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_GetValue_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_GetValue_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_GetValue_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_GetValue_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _ArbitraryValue_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.DoesNotExist, err = _DoesNotExistException_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.DoesNotExist != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("KeyValue_GetValue_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a KeyValue_GetValue_Result
// struct.
func (v *KeyValue_GetValue_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	if v.DoesNotExist != nil {
		fields[i] = fmt.Sprintf("DoesNotExist: %v", v.DoesNotExist)
		i++
	}

	return fmt.Sprintf("KeyValue_GetValue_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_GetValue_Result match the
// provided KeyValue_GetValue_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_GetValue_Result) Equals(rhs *KeyValue_GetValue_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	if !((v.DoesNotExist == nil && rhs.DoesNotExist == nil) || (v.DoesNotExist != nil && rhs.DoesNotExist != nil && v.DoesNotExist.Equals(rhs.DoesNotExist))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_GetValue_Result.
func (v *KeyValue_GetValue_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	if v.DoesNotExist != nil {
		err = multierr.Append(err, enc.AddObject("doesNotExist", v.DoesNotExist))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetValue_Result) GetSuccess() (o *unions.ArbitraryValue) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *KeyValue_GetValue_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// GetDoesNotExist returns the value of DoesNotExist if it is set or its
// zero value if it is unset.
func (v *KeyValue_GetValue_Result) GetDoesNotExist() (o *exceptions.DoesNotExistException) {
	if v != nil && v.DoesNotExist != nil {
		return v.DoesNotExist
	}

	return
}

// IsSetDoesNotExist returns true if DoesNotExist is not nil.
func (v *KeyValue_GetValue_Result) IsSetDoesNotExist() bool {
	return v != nil && v.DoesNotExist != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getValue" for this struct.
func (v *KeyValue_GetValue_Result) MethodName() string {
	return "getValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_GetValue_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_SetValue_Args represents the arguments for the KeyValue.setValue function.
//
// The arguments for setValue are sent and received over the wire as this struct.
type KeyValue_SetValue_Args struct {
	Key   *Key                   `json:"key,omitempty"`
	Value *unions.ArbitraryValue `json:"value,omitempty"`
}

// ToWire translates a KeyValue_SetValue_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_SetValue_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = v.Key.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = v.Value.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_SetValue_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_SetValue_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_SetValue_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_SetValue_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Key
				x, err = _Key_Read(field.Value)
				v.Key = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _ArbitraryValue_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_SetValue_Args
// struct.
func (v *KeyValue_SetValue_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", v.Value)
		i++
	}

	return fmt.Sprintf("KeyValue_SetValue_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_SetValue_Args match the
// provided KeyValue_SetValue_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_SetValue_Args) Equals(rhs *KeyValue_SetValue_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_Key_EqualsPtr(v.Key, rhs.Key) {
		return false
	}
	if !((v.Value == nil && rhs.Value == nil) || (v.Value != nil && rhs.Value != nil && v.Value.Equals(rhs.Value))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_SetValue_Args.
func (v *KeyValue_SetValue_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Key != nil {
		enc.AddString("key", (string)(*v.Key))
	}
	if v.Value != nil {
		err = multierr.Append(err, enc.AddObject("value", v.Value))
	}
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *KeyValue_SetValue_Args) GetKey() (o Key) {
	if v != nil && v.Key != nil {
		return *v.Key
	}

	return
}

// IsSetKey returns true if Key is not nil.
func (v *KeyValue_SetValue_Args) IsSetKey() bool {
	return v != nil && v.Key != nil
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *KeyValue_SetValue_Args) GetValue() (o *unions.ArbitraryValue) {
	if v != nil && v.Value != nil {
		return v.Value
	}

	return
}

// IsSetValue returns true if Value is not nil.
func (v *KeyValue_SetValue_Args) IsSetValue() bool {
	return v != nil && v.Value != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "setValue" for this struct.
func (v *KeyValue_SetValue_Args) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_SetValue_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_SetValue_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.setValue
// function.
var KeyValue_SetValue_Helper = struct {
	// Args accepts the parameters of setValue in-order and returns
	// the arguments struct for the function.
	Args func(
		key *Key,
		value *unions.ArbitraryValue,
	) *KeyValue_SetValue_Args

	// IsException returns true if the given error can be thrown
	// by setValue.
	//
	// An error can be thrown by setValue only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for setValue
	// given the error returned by it. The provided error may
	// be nil if setValue did not fail.
	//
	// This allows mapping errors returned by setValue into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// setValue
	//
	//   err := setValue(args)
	//   result, err := KeyValue_SetValue_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from setValue: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*KeyValue_SetValue_Result, error)

	// UnwrapResponse takes the result struct for setValue
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if setValue threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := KeyValue_SetValue_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_SetValue_Result) error
}{}

func init() {
	KeyValue_SetValue_Helper.Args = func(
		key *Key,
		value *unions.ArbitraryValue,
	) *KeyValue_SetValue_Args {
		return &KeyValue_SetValue_Args{
			Key:   key,
			Value: value,
		}
	}

	KeyValue_SetValue_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	KeyValue_SetValue_Helper.WrapResponse = func(err error) (*KeyValue_SetValue_Result, error) {
		if err == nil {
			return &KeyValue_SetValue_Result{}, nil
		}

		return nil, err
	}
	KeyValue_SetValue_Helper.UnwrapResponse = func(result *KeyValue_SetValue_Result) (err error) {
		return
	}

}

// KeyValue_SetValue_Result represents the result of a KeyValue.setValue function call.
//
// The result of a setValue execution is sent and received over the wire as this struct.
type KeyValue_SetValue_Result struct {
}

// ToWire translates a KeyValue_SetValue_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_SetValue_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_SetValue_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_SetValue_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_SetValue_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_SetValue_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_SetValue_Result
// struct.
func (v *KeyValue_SetValue_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("KeyValue_SetValue_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_SetValue_Result match the
// provided KeyValue_SetValue_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_SetValue_Result) Equals(rhs *KeyValue_SetValue_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_SetValue_Result.
func (v *KeyValue_SetValue_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "setValue" for this struct.
func (v *KeyValue_SetValue_Result) MethodName() string {
	return "setValue"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_SetValue_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_SetValueV2_Args represents the arguments for the KeyValue.setValueV2 function.
//
// The arguments for setValueV2 are sent and received over the wire as this struct.
type KeyValue_SetValueV2_Args struct {
	// Key to change.
	Key Key `json:"key,required"`
	// New value for the key.
	//
	// If the key already has an existing value, it will be overwritten.
	Value *unions.ArbitraryValue `json:"value,required"`
}

// ToWire translates a KeyValue_SetValueV2_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_SetValueV2_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = v.Key.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Value == nil {
		return w, errors.New("field Value of KeyValue_SetValueV2_Args is required")
	}
	w, err = v.Value.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_SetValueV2_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_SetValueV2_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_SetValueV2_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_SetValueV2_Args) FromWire(w wire.Value) error {
	var err error

	keyIsSet := false
	valueIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = _Key_Read(field.Value)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _ArbitraryValue_Read(field.Value)
				if err != nil {
					return err
				}
				valueIsSet = true
			}
		}
	}

	if !keyIsSet {
		return errors.New("field Key of KeyValue_SetValueV2_Args is required")
	}

	if !valueIsSet {
		return errors.New("field Value of KeyValue_SetValueV2_Args is required")
	}

	return nil
}

// String returns a readable string representation of a KeyValue_SetValueV2_Args
// struct.
func (v *KeyValue_SetValueV2_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	fields[i] = fmt.Sprintf("Value: %v", v.Value)
	i++

	return fmt.Sprintf("KeyValue_SetValueV2_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_SetValueV2_Args match the
// provided KeyValue_SetValueV2_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_SetValueV2_Args) Equals(rhs *KeyValue_SetValueV2_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Key == rhs.Key) {
		return false
	}
	if !v.Value.Equals(rhs.Value) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_SetValueV2_Args.
func (v *KeyValue_SetValueV2_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("key", (string)(v.Key))
	err = multierr.Append(err, enc.AddObject("value", v.Value))
	return err
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *KeyValue_SetValueV2_Args) GetKey() (o Key) {
	if v != nil {
		o = v.Key
	}
	return
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *KeyValue_SetValueV2_Args) GetValue() (o *unions.ArbitraryValue) {
	if v != nil {
		o = v.Value
	}
	return
}

// IsSetValue returns true if Value is not nil.
func (v *KeyValue_SetValueV2_Args) IsSetValue() bool {
	return v != nil && v.Value != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "setValueV2" for this struct.
func (v *KeyValue_SetValueV2_Args) MethodName() string {
	return "setValueV2"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_SetValueV2_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_SetValueV2_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.setValueV2
// function.
var KeyValue_SetValueV2_Helper = struct {
	// Args accepts the parameters of setValueV2 in-order and returns
	// the arguments struct for the function.
	Args func(
		key Key,
		value *unions.ArbitraryValue,
	) *KeyValue_SetValueV2_Args

	// IsException returns true if the given error can be thrown
	// by setValueV2.
	//
	// An error can be thrown by setValueV2 only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for setValueV2
	// given the error returned by it. The provided error may
	// be nil if setValueV2 did not fail.
	//
	// This allows mapping errors returned by setValueV2 into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// setValueV2
	//
	//   err := setValueV2(args)
	//   result, err := KeyValue_SetValueV2_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from setValueV2: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*KeyValue_SetValueV2_Result, error)

	// UnwrapResponse takes the result struct for setValueV2
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if setValueV2 threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := KeyValue_SetValueV2_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_SetValueV2_Result) error
}{}

func init() {
	KeyValue_SetValueV2_Helper.Args = func(
		key Key,
		value *unions.ArbitraryValue,
	) *KeyValue_SetValueV2_Args {
		return &KeyValue_SetValueV2_Args{
			Key:   key,
			Value: value,
		}
	}

	KeyValue_SetValueV2_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	KeyValue_SetValueV2_Helper.WrapResponse = func(err error) (*KeyValue_SetValueV2_Result, error) {
		if err == nil {
			return &KeyValue_SetValueV2_Result{}, nil
		}

		return nil, err
	}
	KeyValue_SetValueV2_Helper.UnwrapResponse = func(result *KeyValue_SetValueV2_Result) (err error) {
		return
	}

}

// KeyValue_SetValueV2_Result represents the result of a KeyValue.setValueV2 function call.
//
// The result of a setValueV2 execution is sent and received over the wire as this struct.
type KeyValue_SetValueV2_Result struct {
}

// ToWire translates a KeyValue_SetValueV2_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_SetValueV2_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_SetValueV2_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_SetValueV2_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_SetValueV2_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_SetValueV2_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_SetValueV2_Result
// struct.
func (v *KeyValue_SetValueV2_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("KeyValue_SetValueV2_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_SetValueV2_Result match the
// provided KeyValue_SetValueV2_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_SetValueV2_Result) Equals(rhs *KeyValue_SetValueV2_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_SetValueV2_Result.
func (v *KeyValue_SetValueV2_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "setValueV2" for this struct.
func (v *KeyValue_SetValueV2_Result) MethodName() string {
	return "setValueV2"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_SetValueV2_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// KeyValue_Size_Args represents the arguments for the KeyValue.size function.
//
// The arguments for size are sent and received over the wire as this struct.
type KeyValue_Size_Args struct {
}

// ToWire translates a KeyValue_Size_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_Size_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_Size_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_Size_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_Size_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_Size_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a KeyValue_Size_Args
// struct.
func (v *KeyValue_Size_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("KeyValue_Size_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_Size_Args match the
// provided KeyValue_Size_Args.
//
// This function performs a deep comparison.
func (v *KeyValue_Size_Args) Equals(rhs *KeyValue_Size_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_Size_Args.
func (v *KeyValue_Size_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "size" for this struct.
func (v *KeyValue_Size_Args) MethodName() string {
	return "size"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *KeyValue_Size_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// KeyValue_Size_Helper provides functions that aid in handling the
// parameters and return values of the KeyValue.size
// function.
var KeyValue_Size_Helper = struct {
	// Args accepts the parameters of size in-order and returns
	// the arguments struct for the function.
	Args func() *KeyValue_Size_Args

	// IsException returns true if the given error can be thrown
	// by size.
	//
	// An error can be thrown by size only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for size
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// size into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by size
	//
	//   value, err := size(args)
	//   result, err := KeyValue_Size_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from size: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(int64, error) (*KeyValue_Size_Result, error)

	// UnwrapResponse takes the result struct for size
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if size threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := KeyValue_Size_Helper.UnwrapResponse(result)
	UnwrapResponse func(*KeyValue_Size_Result) (int64, error)
}{}

func init() {
	KeyValue_Size_Helper.Args = func() *KeyValue_Size_Args {
		return &KeyValue_Size_Args{}
	}

	KeyValue_Size_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	KeyValue_Size_Helper.WrapResponse = func(success int64, err error) (*KeyValue_Size_Result, error) {
		if err == nil {
			return &KeyValue_Size_Result{Success: &success}, nil
		}

		return nil, err
	}
	KeyValue_Size_Helper.UnwrapResponse = func(result *KeyValue_Size_Result) (success int64, err error) {

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// KeyValue_Size_Result represents the result of a KeyValue.size function call.
//
// The result of a size execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type KeyValue_Size_Result struct {
	// Value returned by size after a successful execution.
	Success *int64 `json:"success,omitempty"`
}

// ToWire translates a KeyValue_Size_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyValue_Size_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueI64(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("KeyValue_Size_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyValue_Size_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyValue_Size_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyValue_Size_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyValue_Size_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("KeyValue_Size_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a KeyValue_Size_Result
// struct.
func (v *KeyValue_Size_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}

	return fmt.Sprintf("KeyValue_Size_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this KeyValue_Size_Result match the
// provided KeyValue_Size_Result.
//
// This function performs a deep comparison.
func (v *KeyValue_Size_Result) Equals(rhs *KeyValue_Size_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_I64_EqualsPtr(v.Success, rhs.Success) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of KeyValue_Size_Result.
func (v *KeyValue_Size_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		enc.AddInt64("success", *v.Success)
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *KeyValue_Size_Result) GetSuccess() (o int64) {
	if v != nil && v.Success != nil {
		return *v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *KeyValue_Size_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "size" for this struct.
func (v *KeyValue_Size_Result) MethodName() string {
	return "size"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *KeyValue_Size_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// NonStandardServiceName_NonStandardFunctionName_Args represents the arguments for the non_standard_service_name.non_standard_function_name function.
//
// The arguments for non_standard_function_name are sent and received over the wire as this struct.
type NonStandardServiceName_NonStandardFunctionName_Args struct {
}

// ToWire translates a NonStandardServiceName_NonStandardFunctionName_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *NonStandardServiceName_NonStandardFunctionName_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a NonStandardServiceName_NonStandardFunctionName_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a NonStandardServiceName_NonStandardFunctionName_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v NonStandardServiceName_NonStandardFunctionName_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *NonStandardServiceName_NonStandardFunctionName_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a NonStandardServiceName_NonStandardFunctionName_Args
// struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("NonStandardServiceName_NonStandardFunctionName_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this NonStandardServiceName_NonStandardFunctionName_Args match the
// provided NonStandardServiceName_NonStandardFunctionName_Args.
//
// This function performs a deep comparison.
func (v *NonStandardServiceName_NonStandardFunctionName_Args) Equals(rhs *NonStandardServiceName_NonStandardFunctionName_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of NonStandardServiceName_NonStandardFunctionName_Args.
func (v *NonStandardServiceName_NonStandardFunctionName_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "non_standard_function_name" for this struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Args) MethodName() string {
	return "non_standard_function_name"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// NonStandardServiceName_NonStandardFunctionName_Helper provides functions that aid in handling the
// parameters and return values of the non_standard_service_name.non_standard_function_name
// function.
var NonStandardServiceName_NonStandardFunctionName_Helper = struct {
	// Args accepts the parameters of non_standard_function_name in-order and returns
	// the arguments struct for the function.
	Args func() *NonStandardServiceName_NonStandardFunctionName_Args

	// IsException returns true if the given error can be thrown
	// by non_standard_function_name.
	//
	// An error can be thrown by non_standard_function_name only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for non_standard_function_name
	// given the error returned by it. The provided error may
	// be nil if non_standard_function_name did not fail.
	//
	// This allows mapping errors returned by non_standard_function_name into a
	// serializable result struct. WrapResponse returns a
	// non-nil error if the provided error cannot be thrown by
	// non_standard_function_name
	//
	//   err := non_standard_function_name(args)
	//   result, err := NonStandardServiceName_NonStandardFunctionName_Helper.WrapResponse(err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from non_standard_function_name: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(error) (*NonStandardServiceName_NonStandardFunctionName_Result, error)

	// UnwrapResponse takes the result struct for non_standard_function_name
	// and returns the erorr returned by it (if any).
	//
	// The error is non-nil only if non_standard_function_name threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   err := NonStandardServiceName_NonStandardFunctionName_Helper.UnwrapResponse(result)
	UnwrapResponse func(*NonStandardServiceName_NonStandardFunctionName_Result) error
}{}

func init() {
	NonStandardServiceName_NonStandardFunctionName_Helper.Args = func() *NonStandardServiceName_NonStandardFunctionName_Args {
		return &NonStandardServiceName_NonStandardFunctionName_Args{}
	}

	NonStandardServiceName_NonStandardFunctionName_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	NonStandardServiceName_NonStandardFunctionName_Helper.WrapResponse = func(err error) (*NonStandardServiceName_NonStandardFunctionName_Result, error) {
		if err == nil {
			return &NonStandardServiceName_NonStandardFunctionName_Result{}, nil
		}

		return nil, err
	}
	NonStandardServiceName_NonStandardFunctionName_Helper.UnwrapResponse = func(result *NonStandardServiceName_NonStandardFunctionName_Result) (err error) {
		return
	}

}

// NonStandardServiceName_NonStandardFunctionName_Result represents the result of a non_standard_service_name.non_standard_function_name function call.
//
// The result of a non_standard_function_name execution is sent and received over the wire as this struct.
type NonStandardServiceName_NonStandardFunctionName_Result struct {
}

// ToWire translates a NonStandardServiceName_NonStandardFunctionName_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *NonStandardServiceName_NonStandardFunctionName_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a NonStandardServiceName_NonStandardFunctionName_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a NonStandardServiceName_NonStandardFunctionName_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v NonStandardServiceName_NonStandardFunctionName_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *NonStandardServiceName_NonStandardFunctionName_Result) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a NonStandardServiceName_NonStandardFunctionName_Result
// struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("NonStandardServiceName_NonStandardFunctionName_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this NonStandardServiceName_NonStandardFunctionName_Result match the
// provided NonStandardServiceName_NonStandardFunctionName_Result.
//
// This function performs a deep comparison.
func (v *NonStandardServiceName_NonStandardFunctionName_Result) Equals(rhs *NonStandardServiceName_NonStandardFunctionName_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of NonStandardServiceName_NonStandardFunctionName_Result.
func (v *NonStandardServiceName_NonStandardFunctionName_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "non_standard_function_name" for this struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Result) MethodName() string {
	return "non_standard_function_name"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *NonStandardServiceName_NonStandardFunctionName_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
