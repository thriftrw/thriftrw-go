// Code generated by thriftrw --generate-plugin-api
// @generated

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package api

import (
	envelope "go.uber.org/thriftrw/internal/envelope"
	wire "go.uber.org/thriftrw/wire"
)

// PluginHandler serves an implementation of the Plugin service.
type PluginHandler struct {
	impl Plugin
}

// NewPluginHandler builds a new Plugin handler.
func NewPluginHandler(service Plugin) PluginHandler {
	return PluginHandler{
		impl: service,
	}
}

// Handle receives and handles a request for the Plugin service.
func (h PluginHandler) Handle(name string, reqValue wire.Value) (wire.Value, error) {
	switch name {

	case "goodbye":

		var args Plugin_Goodbye_Args
		if err := args.FromWire(reqValue); err != nil {
			return wire.Value{}, err
		}

		result, err := Plugin_Goodbye_Helper.WrapResponse(
			h.impl.Goodbye(),
		)
		if err != nil {
			return wire.Value{}, err
		}

		return result.ToWire()

	case "handshake":

		var args Plugin_Handshake_Args
		if err := args.FromWire(reqValue); err != nil {
			return wire.Value{}, err
		}

		result, err := Plugin_Handshake_Helper.WrapResponse(
			h.impl.Handshake(args.Request),
		)
		if err != nil {
			return wire.Value{}, err
		}

		return result.ToWire()

	default:

		return wire.Value{}, envelope.ErrUnknownMethod(name)

	}
}
