// Automatically generated by MockGen. DO NOT EDIT!

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Source: go.uber.org/thriftrw/plugin/api (interfaces: Plugin,ServiceGenerator)

package plugintest

import (
	gomock "github.com/golang/mock/gomock"
	api "go.uber.org/thriftrw/plugin/api"
)

// Mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *_MockPluginRecorder
}

// Recorder for MockPlugin (not exported)
type _MockPluginRecorder struct {
	mock *MockPlugin
}

func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &_MockPluginRecorder{mock}
	return mock
}

func (_m *MockPlugin) EXPECT() *_MockPluginRecorder {
	return _m.recorder
}

func (_m *MockPlugin) Goodbye() error {
	ret := _m.ctrl.Call(_m, "Goodbye")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPluginRecorder) Goodbye() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Goodbye")
}

func (_m *MockPlugin) Handshake(_param0 *api.HandshakeRequest) (*api.HandshakeResponse, error) {
	ret := _m.ctrl.Call(_m, "Handshake", _param0)
	ret0, _ := ret[0].(*api.HandshakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginRecorder) Handshake(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Handshake", arg0)
}

// Mock of ServiceGenerator interface
type MockServiceGenerator struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceGeneratorRecorder
}

// Recorder for MockServiceGenerator (not exported)
type _MockServiceGeneratorRecorder struct {
	mock *MockServiceGenerator
}

func NewMockServiceGenerator(ctrl *gomock.Controller) *MockServiceGenerator {
	mock := &MockServiceGenerator{ctrl: ctrl}
	mock.recorder = &_MockServiceGeneratorRecorder{mock}
	return mock
}

func (_m *MockServiceGenerator) EXPECT() *_MockServiceGeneratorRecorder {
	return _m.recorder
}

func (_m *MockServiceGenerator) Generate(_param0 *api.GenerateServiceRequest) (*api.GenerateServiceResponse, error) {
	ret := _m.ctrl.Call(_m, "Generate", _param0)
	ret0, _ := ret[0].(*api.GenerateServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceGeneratorRecorder) Generate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Generate", arg0)
}
